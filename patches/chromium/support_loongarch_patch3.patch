From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: linshizhi <email>
Date: Fri, 23 Aug 2024 17:05:25 +0800
Subject: Support LoongArch Patch3


diff --git a/sandbox/features.gni b/sandbox/features.gni
index 8434144118b49c33a60fa455153a0e2d498a08a7..e1c0af43cebd688be67b805550042f8297b1bdf1 100644
--- a/sandbox/features.gni
+++ b/sandbox/features.gni
@@ -9,7 +9,8 @@
 use_seccomp_bpf = (is_linux || is_chromeos || is_android) &&
                   (current_cpu == "x86" || current_cpu == "x64" ||
                    current_cpu == "arm" || current_cpu == "arm64" ||
-                   current_cpu == "mipsel" || current_cpu == "mips64el")
+                   current_cpu == "mipsel" || current_cpu == "mips64el" ||
+                   current_cpu == "loong64")
 
 # SSBD (Speculative Store Bypass Disable) is a mitigation of Spectre Variant 4.
 # As Spectre Variant 4 can be mitigated by site isolation, opt-out SSBD on site
diff --git a/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc b/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
index 6b5b25c552cda59e0028343f3fb7cc4ba4d38be9..45daae66aab12891b00c5e1310ba403ffce07dc8 100644
--- a/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
+++ b/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
@@ -368,7 +368,7 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
   // Allow creating pipes, but don't allow weird flags to pipe2().
   // O_NOTIFICATION_PIPE (== O_EXCL) can be used to create
   // "notification pipes", which are rarely used.
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch__)
   if (sysno == __NR_pipe) {
     return Allow();
   }
diff --git a/sandbox/linux/seccomp-bpf/syscall.cc b/sandbox/linux/seccomp-bpf/syscall.cc
index 0358b696923660b365b60f3d941d7803f6a819e0..f32853c4c74417fbb6ca3f98e351587f7f8637a3 100644
--- a/sandbox/linux/seccomp-bpf/syscall.cc
+++ b/sandbox/linux/seccomp-bpf/syscall.cc
@@ -18,7 +18,7 @@ namespace sandbox {
 namespace {
 
 #if defined(ARCH_CPU_X86_FAMILY) || defined(ARCH_CPU_ARM_FAMILY) || \
-    defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONG_FAMILY)
+    defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONGARCH_FAMILY)
 // Number that's not currently used by any Linux kernel ABIs.
 const int kInvalidSyscallNumber = 0x351d3;
 #else
diff --git a/sandbox/linux/services/credentials.cc b/sandbox/linux/services/credentials.cc
index d64a222344a7c1c03fd549804df422f026697296..6d545b8d5ee7be1db7c06e5f0d977823f43e46d9 100644
--- a/sandbox/linux/services/credentials.cc
+++ b/sandbox/linux/services/credentials.cc
@@ -80,7 +80,7 @@ bool ChrootToSafeEmptyDir() {
   pid_t pid = -1;
   alignas(16) char stack_buf[PTHREAD_STACK_MIN];
 #if defined(ARCH_CPU_X86_FAMILY) || defined(ARCH_CPU_ARM_FAMILY) || \
-    defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONG_FAMILY)
+    defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONGARCH_FAMILY)
   // The stack grows downward.
   void* stack = stack_buf + sizeof(stack_buf);
 #else
diff --git a/sandbox/linux/services/syscall_wrappers.cc b/sandbox/linux/services/syscall_wrappers.cc
index 42f9a3530b6c7562b4e4a7f875ee0461fd2ad579..e1d0267d006429f7964ab523eb8b3b4c5794feb6 100644
--- a/sandbox/linux/services/syscall_wrappers.cc
+++ b/sandbox/linux/services/syscall_wrappers.cc
@@ -61,7 +61,7 @@ long sys_clone(unsigned long flags,
 #if defined(ARCH_CPU_X86_64)
   return syscall(__NR_clone, flags, child_stack, ptid, ctid, tls);
 #elif defined(ARCH_CPU_X86) || defined(ARCH_CPU_ARM_FAMILY) || \
-    defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONG_FAMILY)
+    defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONGARCH_FAMILY)
   // CONFIG_CLONE_BACKWARDS defined.
   return syscall(__NR_clone, flags, child_stack, ptid, tls, ctid);
 #endif
@@ -163,6 +163,7 @@ int sys_sigaction(int signum,
   return sigaction(signum, act, oldact);
 }
 
+#if defined(ARCH_CPU_LOONGARCH_FAMILY)
 void statx_to_stat(struct kernel_stat* to, struct kernel_statx* from){
   memset (to, 0, sizeof (struct kernel_stat));
   to->st_dev = ((from->stx_dev_minor & 0xff) | (from->stx_dev_major << 8)
@@ -202,11 +203,12 @@ int sys_statx(int fd,
   return -ENOSYS;
 #endif
 }
+#endif
 
 int sys_stat(const char* path, struct kernel_stat* stat_buf) {
   int res;
 #if !defined(__NR_stat)
-#if defined(__NR_statx)
+#if defined(__NR_statx) && defined(ARCH_CPU_LOONGARCH_FAMILY)
   kernel_statx statx_buf;
   res = sys_statx(AT_FDCWD, path, AT_STATX_SYNC_AS_STAT, STATX_BASIC_STATS, &statx_buf);
   if (res == 0)
@@ -225,7 +227,16 @@ int sys_stat(const char* path, struct kernel_stat* stat_buf) {
 int sys_lstat(const char* path, struct kernel_stat* stat_buf) {
   int res;
 #if !defined(__NR_lstat)
+#if defined(__NR_statx) && defined(ARCH_CPU_LOONGARCH_FAMILY)
+  kernel_statx statx_buf;
+  int flag = 0;
+  flag = AT_NO_AUTOMOUNT | AT_SYMLINK_NOFOLLOW;
+  res = sys_statx(AT_FDCWD, path, flag, STATX_BASIC_STATS, &statx_buf);
+  if(res == 0)
+    statx_to_stat(stat_buf, &statx_buf);
+#else //defined(__NR_statx)
   res = syscall(__NR_newfstatat, AT_FDCWD, path, stat_buf, AT_SYMLINK_NOFOLLOW);
+#endif
 #else
   res = syscall(__NR_lstat, path, stat_buf);
 #endif
diff --git a/sandbox/linux/syscall_broker/broker_process.cc b/sandbox/linux/syscall_broker/broker_process.cc
index 949674407fdbe8b7b31fc7d728ee78cc5f887c57..464d1071e6d507790bf7d610bc7dfa3da0f5719e 100644
--- a/sandbox/linux/syscall_broker/broker_process.cc
+++ b/sandbox/linux/syscall_broker/broker_process.cc
@@ -129,6 +129,7 @@ bool BrokerProcess::IsSyscallBrokerable(int sysno, bool fast_check) const {
 #if !defined(__loongarch64)
     case __NR_faccessat2:
       return !fast_check || policy_->allowed_command_set.test(COMMAND_ACCESS);
+#endif
 
 #if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID) && !defined(__loongarch64)
     case __NR_mkdir:
@@ -142,7 +143,7 @@ bool BrokerProcess::IsSyscallBrokerable(int sysno, bool fast_check) const {
     case __NR_openat:
       return !fast_check || policy_->allowed_command_set.test(COMMAND_OPEN);
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID) && !defined(__loongarch64)
     case __NR_readlink:
 #endif
     case __NR_readlinkat:
@@ -160,7 +161,7 @@ bool BrokerProcess::IsSyscallBrokerable(int sysno, bool fast_check) const {
       return !fast_check || policy_->allowed_command_set.test(COMMAND_RMDIR);
 #endif
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID) && !defined(__loongarch64)
     case __NR_stat:
     case __NR_lstat:
 #endif
diff --git a/sandbox/linux/system_headers/loong64_linux_syscalls.h b/sandbox/linux/system_headers/loong64_linux_syscalls.h
index 12b7e622022f548f27dcd761d8f7996764a22757..f389119aa6b9573e3631f9e23cd41110f3325fd1 100644
--- a/sandbox/linux/system_headers/loong64_linux_syscalls.h
+++ b/sandbox/linux/system_headers/loong64_linux_syscalls.h
@@ -328,6 +328,7 @@
 
 #if defined(__ARCH_WANT_NEW_STAT) || defined(__ARCH_WANT_STAT64)
 #if !defined(__NR_newfstatat)
+jalksdjflk
 #define __NR_newfstatat 79
 #endif
 
diff --git a/sandbox/policy/linux/bpf_network_policy_linux.cc b/sandbox/policy/linux/bpf_network_policy_linux.cc
index c2ee245dd208d4628ae4bf3e0dda8287421c8803..5ec26cec9791dda110ab50bab4d4de178a4bc1ba 100644
--- a/sandbox/policy/linux/bpf_network_policy_linux.cc
+++ b/sandbox/policy/linux/bpf_network_policy_linux.cc
@@ -260,7 +260,7 @@ ResultExpr NetworkProcessPolicy::EvaluateSyscall(int sysno) const {
     case __NR_fdatasync:
     case __NR_fsync:
     case __NR_mremap:
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_getdents:
 #endif
     case __NR_getdents64:
diff --git a/third_party/crashpad/crashpad/client/crashpad_client_linux.cc b/third_party/crashpad/crashpad/client/crashpad_client_linux.cc
index 1d79be7a08c43d5de049032dc04eb501a544c155..31ba09c27d4feba90bfccad1462754ec8d5106c3 100644
--- a/third_party/crashpad/crashpad/client/crashpad_client_linux.cc
+++ b/third_party/crashpad/crashpad/client/crashpad_client_linux.cc
@@ -729,6 +729,10 @@ void CrashpadClient::DumpWithoutCrash(NativeCPUContext* context) {
   memset(context->uc_mcontext.__reserved,
          0,
          sizeof(context->uc_mcontext.__reserved));
+#elif defined(ARCH_CPU_LOONGARCH64)
+  memset(context->ucontext.uc_mcontext.__extcontext,
+         0,
+         sizeof(struct sctx_info));
 #endif
 
   siginfo_t siginfo;
diff --git a/third_party/crashpad/crashpad/compat/linux/sys/ptrace.h b/third_party/crashpad/crashpad/compat/linux/sys/ptrace.h
index 604a46ab06ac1f07db1e00b006238726e8127aaf..0f13e1288df8701c4c4d245b17ea3b3602550069 100644
--- a/third_party/crashpad/crashpad/compat/linux/sys/ptrace.h
+++ b/third_party/crashpad/crashpad/compat/linux/sys/ptrace.h
@@ -38,6 +38,10 @@ static constexpr __ptrace_request PTRACE_GET_THREAD_AREA =
 static constexpr __ptrace_request PTRACE_GET_THREAD_AREA_3264 =
     static_cast<__ptrace_request>(0xc4);
 #define PTRACE_GET_THREAD_AREA_3264 PTRACE_GET_THREAD_AREA_3264
+#elif defined(__loongarch64)
+static constexpr __ptrace_request PTRACE_GET_THREAD_AREA =
+    static_cast<__ptrace_request>(25);
+#define PTRACE_GET_THREAD_AREA PTRACE_GET_THREAD_AREA
 #endif
 #endif  // !PTRACE_GET_THREAD_AREA && !PT_GET_THREAD_AREA && defined(__GLIBC__)
 
diff --git a/third_party/crashpad/crashpad/compat/non_win/winnt.h b/third_party/crashpad/crashpad/compat/non_win/winnt.h
index 5fd78b0d8e08ded2faa161a06f9113c126bd23c6..66ca6332744cd1bdb6a80d01e56470f13235201f 100644
--- a/third_party/crashpad/crashpad/compat/non_win/winnt.h
+++ b/third_party/crashpad/crashpad/compat/non_win/winnt.h
@@ -67,6 +67,7 @@
 #define PROCESSOR_ARCHITECTURE_NEUTRAL 11
 #define PROCESSOR_ARCHITECTURE_ARM64 12
 #define PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64 13
+#define PROCESSOR_ARCHITECTURE_LOONG64 14
 #define PROCESSOR_ARCHITECTURE_UNKNOWN 0xffff
 //! \}
 
diff --git a/third_party/crashpad/crashpad/handler/BUILD.gn b/third_party/crashpad/crashpad/handler/BUILD.gn
index a2d6f7fb482a734efcbfa82812eb7363bbcf085c..450cc8cca3dc261f7a1cfee1a9b014b468dc8681 100644
--- a/third_party/crashpad/crashpad/handler/BUILD.gn
+++ b/third_party/crashpad/crashpad/handler/BUILD.gn
@@ -245,6 +245,12 @@ if (!crashpad_is_ios) {
       "../third_party/mini_chromium:base",
       "../tools:tool_support",
     ]
+
+    ldflags = [
+      "-lnss3",
+      "-L" + rebase_path(root_build_dir),
+      "-Wl,-rpath=\$ORIGIN",
+    ]
   }
 }
 
diff --git a/third_party/crashpad/crashpad/minidump/minidump_context.h b/third_party/crashpad/crashpad/minidump/minidump_context.h
index 12413de02b6624873668f5806618ee53e7f10e01..33e2ba6c30d2006229883c8bfb4e237f2ea96a93 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_context.h
+++ b/third_party/crashpad/crashpad/minidump/minidump_context.h
@@ -687,6 +687,56 @@ struct MinidumpContextRISCV64 {
   uint32_t fcsr;
 };
 
+//! \brief LOONG64-specifc flags for MinidumpContextLOONG64::context_flags.
+//! Based on minidump_cpu_loong64.h from breakpad
+enum MinidumpContextLOONG64Flags : uint32_t {
+  //! \brief Identifies the context structure as LOONG64.
+  kMinidumpContextLOONG64 = 0x00800000,
+
+  //! \brief Indicates the validity of integer registers.
+  //!
+  //! Registers `0`-`31`, `epc` are valid.
+  kMinidumpContextLOONG64Integer = kMinidumpContextLOONG64 | 0x00000002,
+
+  //! \brief Indicates the validity of floating point registers.
+  //!
+  //! Floating point registers `0`-`31`, `fpcsr` and `fir` are valid
+  kMinidumpContextLOONG64FloatingPoint = kMinidumpContextLOONG64 | 0x00000004,
+
+  //! \brief Indicates the validity of all registers.
+  kMinidumpContextLOONG64All = kMinidumpContextLOONG64Integer |
+                              kMinidumpContextLOONG64FloatingPoint,
+};
+
+//! \brief A LOONG64 CPU context (register state) carried in a minidump file.
+struct MinidumpContextLOONG64 {
+  uint64_t context_flags;
+
+  //! \brief General purpose registers.
+  uint64_t regs[32];
+
+  //! \brief csr_era registers.
+  uint64_t csr_era;
+
+  //! \brief FPU registers.
+  union {
+    struct {
+      float _fp_fregs;
+      uint32_t _fp_pad;
+    } fregs[32];
+    double dregs[32];
+  } fpregs;
+
+  //! \brief Floating-point status and control register.
+  uint64_t fcc;
+
+  //! \brief Floating-point control and status register.
+  uint32_t fcsr;
+
+  //! \brief padding
+  uint32_t _pad;
+};
+
 }  // namespace crashpad
 
 #endif  // CRASHPAD_MINIDUMP_MINIDUMP_CONTEXT_H_
diff --git a/third_party/crashpad/crashpad/minidump/minidump_context_writer.cc b/third_party/crashpad/crashpad/minidump/minidump_context_writer.cc
index 4a6130b63e954d11d6778a6d1320380c7098cf60..8ea95962c991902b9f18b15f929bdf91858cc36d 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_context_writer.cc
+++ b/third_party/crashpad/crashpad/minidump/minidump_context_writer.cc
@@ -110,6 +110,13 @@ MinidumpContextWriter::CreateFromSnapshot(const CPUContext* context_snapshot) {
       break;
     }
 
+    case kCPUArchitectureLOONG64: {
+      context = std::make_unique<MinidumpContextLOONG64Writer>();
+      reinterpret_cast<MinidumpContextLOONG64Writer*>(context.get())
+          ->InitializeFromSnapshot(context_snapshot->loong64);
+      break;
+    }
+
     default: {
       LOG(ERROR) << "unknown context architecture "
                  << context_snapshot->architecture;
@@ -518,6 +525,45 @@ size_t MinidumpContextMIPSWriter::ContextSize() const {
   return sizeof(context_);
 }
 
+MinidumpContextLOONG64Writer::MinidumpContextLOONG64Writer()
+    : MinidumpContextWriter(), context_() {
+  context_.context_flags = kMinidumpContextLOONG64;
+}
+
+MinidumpContextLOONG64Writer::~MinidumpContextLOONG64Writer() = default;
+
+void MinidumpContextLOONG64Writer::InitializeFromSnapshot(
+    const CPUContextLOONG64* context_snapshot) {
+  DCHECK_EQ(state(), kStateMutable);
+  DCHECK_EQ(context_.context_flags, kMinidumpContextLOONG64);
+
+  context_.context_flags = kMinidumpContextLOONG64All;
+
+  static_assert(sizeof(context_.regs) == sizeof(context_snapshot->regs),
+                "GPRs size mismatch");
+  memcpy(context_.regs, context_snapshot->regs, sizeof(context_.regs));
+  context_.csr_era = context_snapshot->csr_era;
+
+  static_assert(sizeof(context_.fpregs) == sizeof(context_snapshot->fpregs),
+                "FPRs size mismatch");
+  memcpy(context_.fpregs.dregs,
+         context_snapshot->fpregs.dregs,
+         sizeof(context_.fpregs.dregs));
+  context_.fcsr = context_snapshot->fcsr;
+  context_.fcc = context_snapshot->fcc;
+}
+
+bool MinidumpContextLOONG64Writer::WriteObject(
+    FileWriterInterface* file_writer) {
+  DCHECK_EQ(state(), kStateWritable);
+  return file_writer->Write(&context_, sizeof(context_));
+}
+
+size_t MinidumpContextLOONG64Writer::ContextSize() const {
+  DCHECK_GE(state(), kStateFrozen);
+  return sizeof(context_);
+}
+
 MinidumpContextMIPS64Writer::MinidumpContextMIPS64Writer()
     : MinidumpContextWriter(), context_() {
   context_.context_flags = kMinidumpContextMIPS64;
diff --git a/third_party/crashpad/crashpad/minidump/minidump_context_writer.h b/third_party/crashpad/crashpad/minidump/minidump_context_writer.h
index 8e39c6692f2949560140f85e57f1cf482fb5f880..d72021357e7111ddee287540c46fff1578c56da5 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_context_writer.h
+++ b/third_party/crashpad/crashpad/minidump/minidump_context_writer.h
@@ -22,6 +22,14 @@
 #include "minidump/minidump_context.h"
 #include "minidump/minidump_writable.h"
 
+// A macro to disallow the copy constructor and operator= functions
+// This should be used in the private: declarations for a class
+#ifndef DISALLOW_COPY_AND_ASSIGN
+#define DISALLOW_COPY_AND_ASSIGN(TypeName) \
+  TypeName(const TypeName&);               \
+  void operator=(const TypeName&)
+#endif  // DISALLOW_COPY_AND_ASSIGN
+
 namespace crashpad {
 
 struct CPUContext;
@@ -413,6 +421,46 @@ class MinidumpContextRISCV64Writer final : public MinidumpContextWriter {
   MinidumpContextRISCV64 context_;
 };
 
+//! \brief The writer for a MinidumpContextLOONG64 structure in a minidump file.
+class MinidumpContextLOONG64Writer final : public MinidumpContextWriter {
+ public:
+  MinidumpContextLOONG64Writer();
+  ~MinidumpContextLOONG64Writer() override;
+
+  //! \brief Initializes the MinidumpContextLOONGARCH based on \a context_snapshot.
+  //!
+  //! \param[in] context_snapshot The context snapshot to use as source data.
+  //!
+  //! \note Valid in #kStateMutable. No mutation of context() may be done before
+  //!     calling this method, and it is not normally necessary to alter
+  //!     context() after calling this method.
+  void InitializeFromSnapshot(const CPUContextLOONG64* context_snapshot);
+
+  //! \brief Returns a pointer to the context structure that this object will
+  //!     write.
+  //!
+  //! \attention This returns a non-`const` pointer to this object’s private
+  //!     data so that a caller can populate the context structure directly.
+  //!     This is done because providing setter interfaces to each field in the
+  //!     context structure would be unwieldy and cumbersome. Care must be taken
+  //!     to populate the context structure correctly. The context structure
+  //!     must only be modified while this object is in the #kStateMutable
+  //!     state.
+  MinidumpContextLOONG64* context() { return &context_; }
+
+ protected:
+  // MinidumpWritable:
+  bool WriteObject(FileWriterInterface* file_writer) override;
+
+  // MinidumpContextWriter:
+  size_t ContextSize() const override;
+
+ private:
+  MinidumpContextLOONG64 context_;
+
+  DISALLOW_COPY_AND_ASSIGN(MinidumpContextLOONG64Writer);
+};
+
 }  // namespace crashpad
 
 #endif  // CRASHPAD_MINIDUMP_MINIDUMP_CONTEXT_WRITER_H_
diff --git a/third_party/crashpad/crashpad/minidump/minidump_context_writer_test.cc b/third_party/crashpad/crashpad/minidump/minidump_context_writer_test.cc
index 9eebe81b296f5e2322414ab8535d37b75925044a..51876e09a8b06862faf3a72b9d7891cc377a1020 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_context_writer_test.cc
+++ b/third_party/crashpad/crashpad/minidump/minidump_context_writer_test.cc
@@ -328,6 +328,21 @@ TYPED_TEST(MinidumpContextWriter, RISCV64_FromSnapshot) {
                    TypeParam>(context, ExpectMinidumpContextRISCV64, kSeed);
 }
 
+TEST(MinidumpContextWriter, LOONG64_Zeros) {
+  EmptyContextTest<MinidumpContextLOONG64Writer, MinidumpContextLOONG64>(
+      ExpectMinidumpContextLOONG64);
+}
+
+TEST(MinidumpContextWriter, LOONG64_FromSnapshot) {
+  constexpr uint32_t kSeed = 64;
+  CPUContextLOONG64 context_loong64;
+  CPUContext context;
+  context.loong64 = &context_loong64;
+  InitializeCPUContextLOONG64(&context, kSeed);
+  FromSnapshotTest<MinidumpContextLOONG64Writer, MinidumpContextLOONG64>(
+      context, ExpectMinidumpContextLOONG64, kSeed);
+}
+
 }  // namespace
 }  // namespace test
 }  // namespace crashpad
diff --git a/third_party/crashpad/crashpad/minidump/minidump_extensions.h b/third_party/crashpad/crashpad/minidump/minidump_extensions.h
index a5f442bf5ebf0289cc81f512518a21d72c08de13..37e1df2e315f02d1afcd2365842f1b5ceb1b5e56 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_extensions.h
+++ b/third_party/crashpad/crashpad/minidump/minidump_extensions.h
@@ -154,6 +154,7 @@ enum MinidumpCPUArchitecture : uint16_t {
   kMinidumpCPUArchitectureX86 = PROCESSOR_ARCHITECTURE_INTEL,
 
   kMinidumpCPUArchitectureMIPS = PROCESSOR_ARCHITECTURE_MIPS,
+  kMinidumpCPUArchitectureLOONG64 = PROCESSOR_ARCHITECTURE_LOONG64,
   kMinidumpCPUArchitectureAlpha = PROCESSOR_ARCHITECTURE_ALPHA,
 
   //! \brief 32-bit PowerPC.
diff --git a/third_party/crashpad/crashpad/minidump/minidump_misc_info_writer.cc b/third_party/crashpad/crashpad/minidump/minidump_misc_info_writer.cc
index 1abb46c318142d6bce7209d76b221b57864a035a..d69fcd7e07bc17db3f870a887222f2f54b8a7db6 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_misc_info_writer.cc
+++ b/third_party/crashpad/crashpad/minidump/minidump_misc_info_writer.cc
@@ -177,6 +177,8 @@ std::string MinidumpMiscInfoDebugBuildString() {
   static constexpr char kCPU[] = "mips64";
 #elif defined(ARCH_CPU_RISCV64)
   static constexpr char kCPU[] = "riscv64";
+#elif defined(ARCH_CPU_LOONGARCH64)
+  static constexpr char kCPU[] = "loong64";
 #else
 #error define kCPU for this CPU
 #endif
diff --git a/third_party/crashpad/crashpad/minidump/minidump_system_info_writer.cc b/third_party/crashpad/crashpad/minidump/minidump_system_info_writer.cc
index e2ab775ae77cecee310c977de72810bed829ecda..ab752f7dd15a53acc6bce389673130cac14efdee 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_system_info_writer.cc
+++ b/third_party/crashpad/crashpad/minidump/minidump_system_info_writer.cc
@@ -135,6 +135,9 @@ void MinidumpSystemInfoWriter::InitializeFromSnapshot(
     case kCPUArchitectureRISCV64:
       cpu_architecture = kMinidumpCPUArchitectureRISCV64Breakpad;
       break;
+    case kCPUArchitectureLOONG64:
+      cpu_architecture = kMinidumpCPUArchitectureLOONG64;
+      break;
     default:
       NOTREACHED();
       cpu_architecture = kMinidumpCPUArchitectureUnknown;
diff --git a/third_party/crashpad/crashpad/snapshot/BUILD.gn b/third_party/crashpad/crashpad/snapshot/BUILD.gn
index 2ae944c3e8936f3f3b8a53f3bec3db3eb2f36f25..6492bac003365c6571b8fe6cd0d4e0c26ff6bf87 100644
--- a/third_party/crashpad/crashpad/snapshot/BUILD.gn
+++ b/third_party/crashpad/crashpad/snapshot/BUILD.gn
@@ -468,7 +468,8 @@ source_set("snapshot_test") {
   }
 
   if ((crashpad_is_linux || crashpad_is_android || crashpad_is_fuchsia) &&
-      target_cpu != "mipsel" && target_cpu != "mips64el") {
+      target_cpu != "mipsel" && target_cpu != "mips64el" && 
+      target_cpu != "loong64") {
     data_deps += [ ":crashpad_snapshot_test_both_dt_hash_styles" ]
   }
 
@@ -506,6 +507,11 @@ crashpad_loadable_module("crashpad_snapshot_test_module") {
     "$mini_chromium_source_parent:base",
     "../client",
   ]
+  ldflags = [
+    "-lnss3",
+    "-L" + rebase_path(root_build_dir),
+    "-Wl,-rpath=\$ORIGIN",
+  ]
   if (crashpad_is_in_fuchsia) {
     # TODO(fxbug.dev/42059784): Remove this once the underlying issue is
     # addressed.
@@ -526,6 +532,12 @@ crashpad_loadable_module("crashpad_snapshot_test_module_large") {
   defines = [ "CRASHPAD_INFO_SIZE_TEST_MODULE_LARGE" ]
   deps += [ "$mini_chromium_source_parent:base" ]
 
+  ldflags = [
+    "-lnss3",
+    "-L" + rebase_path(root_build_dir),
+    "-Wl,-rpath=\$ORIGIN",
+  ]
+
   if (crashpad_is_in_fuchsia) {
     # TODO(fxbug.dev/42059784): Remove this once the underlying issue is
     # addressed.
@@ -546,6 +558,12 @@ crashpad_loadable_module("crashpad_snapshot_test_module_small") {
   defines = [ "CRASHPAD_INFO_SIZE_TEST_MODULE_SMALL" ]
   deps += [ "$mini_chromium_source_parent:base" ]
 
+  ldflags = [
+    "-lnss3",
+    "-L" + rebase_path(root_build_dir),
+    "-Wl,-rpath=\$ORIGIN",
+  ]
+
   if (crashpad_is_in_fuchsia) {
     # TODO(fxbug.dev/42059784): Remove this once the underlying issue is
     # addressed.
@@ -554,7 +572,8 @@ crashpad_loadable_module("crashpad_snapshot_test_module_small") {
 }
 
 if ((crashpad_is_linux || crashpad_is_android || crashpad_is_fuchsia) &&
-    target_cpu != "mipsel" && target_cpu != "mips64el") {
+    target_cpu != "mipsel" && target_cpu != "mips64el" && 
+    target_cpu != "loong64") {
   crashpad_loadable_module("crashpad_snapshot_test_both_dt_hash_styles") {
     testonly = true
     sources = [ "hash_types_test.cc" ]
diff --git a/third_party/crashpad/crashpad/snapshot/capture_memory.cc b/third_party/crashpad/crashpad/snapshot/capture_memory.cc
index f2ff5d74bb96a9e65437d5d95c7e58dd62716f33..3ffe67a96a5bd70affa4c11de1dffe4cc44f357c 100644
--- a/third_party/crashpad/crashpad/snapshot/capture_memory.cc
+++ b/third_party/crashpad/crashpad/snapshot/capture_memory.cc
@@ -123,6 +123,10 @@ void CaptureMemory::PointedToByContext(const CPUContext& context,
   for (size_t i = 0; i < std::size(context.riscv64->regs); ++i) {
     MaybeCaptureMemoryAround(delegate, context.riscv64->regs[i]);
   }
+#elif defined(ARCH_CPU_LOONGARCH64)
+  for (size_t i = 0; i < std::size(context.loong64->regs); ++i) {
+    MaybeCaptureMemoryAround(delegate, context.loong64->regs[i]);
+  }
 #else
 #error Port.
 #endif
diff --git a/third_party/crashpad/crashpad/snapshot/cpu_architecture.h b/third_party/crashpad/crashpad/snapshot/cpu_architecture.h
index 26d45f841229a72c0b927b2c49a2eee99713c84f..e408226e6c84d6f77115d2bffa6412940addf0c0 100644
--- a/third_party/crashpad/crashpad/snapshot/cpu_architecture.h
+++ b/third_party/crashpad/crashpad/snapshot/cpu_architecture.h
@@ -47,6 +47,9 @@ enum CPUArchitecture {
 
   //! \brief 64-bit RISC-V.
   kCPUArchitectureRISCV64,
+
+  //! \brief 64-bit LOONGARCH
+  kCPUArchitectureLOONG64,
 };
 
 }  // namespace crashpad
diff --git a/third_party/crashpad/crashpad/snapshot/cpu_context.cc b/third_party/crashpad/crashpad/snapshot/cpu_context.cc
index 492a0f7f914cafe0bb7eb078760bb2caa6588612..fd9f04e162626c13a39a393c607efb024a03f9a2 100644
--- a/third_party/crashpad/crashpad/snapshot/cpu_context.cc
+++ b/third_party/crashpad/crashpad/snapshot/cpu_context.cc
@@ -173,6 +173,8 @@ uint64_t CPUContext::InstructionPointer() const {
       return arm64->pc;
     case kCPUArchitectureRISCV64:
       return riscv64->pc;
+    case kCPUArchitectureLOONG64:
+      return loong64->csr_era;
     default:
       NOTREACHED();
       return ~0ull;
@@ -191,6 +193,8 @@ uint64_t CPUContext::StackPointer() const {
       return arm64->sp;
     case kCPUArchitectureRISCV64:
       return riscv64->regs[1];
+    case kCPUArchitectureLOONG64:
+      return loong64->regs[3];
     default:
       NOTREACHED();
       return ~0ull;
@@ -232,6 +236,7 @@ bool CPUContext::Is64Bit() const {
     case kCPUArchitectureARM64:
     case kCPUArchitectureMIPS64EL:
     case kCPUArchitectureRISCV64:
+    case kCPUArchitectureLOONG64:
       return true;
     case kCPUArchitectureX86:
     case kCPUArchitectureARM:
diff --git a/third_party/crashpad/crashpad/snapshot/cpu_context.h b/third_party/crashpad/crashpad/snapshot/cpu_context.h
index c3640c328c64530828d242ac1b8429c1b1649f99..71ebb2ae803210b4c8fcae10d5b1521f1173bea4 100644
--- a/third_party/crashpad/crashpad/snapshot/cpu_context.h
+++ b/third_party/crashpad/crashpad/snapshot/cpu_context.h
@@ -371,6 +371,21 @@ struct CPUContextRISCV64 {
   uint32_t fcsr;
 };
 
+struct CPUContextLOONG64 {
+  uint64_t regs[32];
+  uint64_t csr_era;
+  union {
+    double dregs[32];
+    struct {
+      float _fp_fregs;
+      uint32_t _fp_pad;
+    } fregs[32];
+  } fpregs;
+  uint64_t fcc;
+  uint32_t fcsr;
+  uint32_t _pad;
+};
+
 //! \brief A context structure capable of carrying the context of any supported
 //!     CPU architecture.
 struct CPUContext {
@@ -412,6 +427,7 @@ struct CPUContext {
     CPUContextMIPS* mipsel;
     CPUContextMIPS64* mips64;
     CPUContextRISCV64* riscv64;
+    CPUContextLOONG64* loong64;
   };
 };
 
diff --git a/third_party/crashpad/crashpad/snapshot/elf/elf_symbol_table_reader.cc b/third_party/crashpad/crashpad/snapshot/elf/elf_symbol_table_reader.cc
index 4c59d74599498378785425ce15f9a32157bd1eb4..b97f4a51fc02e51b6372578fcf1b403b1abc1b6c 100644
--- a/third_party/crashpad/crashpad/snapshot/elf/elf_symbol_table_reader.cc
+++ b/third_party/crashpad/crashpad/snapshot/elf/elf_symbol_table_reader.cc
@@ -72,16 +72,21 @@ bool ElfSymbolTableReader::ScanSymbolTable(const std::string& name,
   SymEnt entry;
   std::string string;
   size_t i = 0;
+const char vdso_prefix[] = "__vdso_";
+
   while (i < num_entries_ && memory_->Read(address, sizeof(entry), &entry)) {
-    if (elf_reader_->ReadDynamicStringTableAtOffset(entry.st_name, &string) &&
-        string == name) {
-      info_out->address = entry.st_value;
-      info_out->size = entry.st_size;
-      info_out->shndx = entry.st_shndx;
-      info_out->binding = GetBinding(entry);
-      info_out->type = GetType(entry);
-      info_out->visibility = GetVisibility(entry);
-      return true;
+    if (elf_reader_->ReadDynamicStringTableAtOffset(entry.st_name, &string)) {
+      if (string.find(vdso_prefix) == 0)
+        string.erase(0, sizeof(vdso_prefix) - 1);     
+      if (string == name) {
+        info_out->address = entry.st_value;
+        info_out->size = entry.st_size;
+        info_out->shndx = entry.st_shndx;
+        info_out->binding = GetBinding(entry);
+        info_out->type = GetType(entry);
+        info_out->visibility = GetVisibility(entry);
+        return true;
+      }
     }
     // TODO(scottmg): This should respect DT_SYMENT if present.
     address += sizeof(entry);
diff --git a/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.cc
index 6c4cb3ebce6c53c6231b4c1ce2cac562ad36cbc3..9ed62cf318e69ab73cf0a6dd8792a2ced971dc6f 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.cc
@@ -281,6 +281,38 @@ void InitializeCPUContextRISCV64(const ThreadContext::t64_t& thread_context,
   context->fcsr = float_context.fcsr;
 }
 
+#elif defined(ARCH_CPU_LOONGARCH64)
+void InitializeCPUContextLOONG64_NoFloatingPoint(
+    const ThreadContext::t64_t& thread_context,
+    CPUContextLOONG64* context) {
+  static_assert(sizeof(context->regs) == sizeof(thread_context.regs),
+                "gpr context size mismtach");
+  memcpy(context->regs, thread_context.regs, sizeof(context->regs));
+  context->csr_era = thread_context.csr_era;
+
+  memset(&context->fpregs, 0, sizeof(context->fpregs));
+  context->fcc = 0;
+  context->fcsr = 0;
+}
+
+void InitializeCPUContextLOONG64_OnlyFPU(
+    const FloatContext::f64_t& float_context,
+    CPUContextLOONG64* context) {
+  static_assert(sizeof(context->fpregs) == sizeof(float_context.fpregs),
+                "fpu context size mismatch");
+  memcpy(&context->fpregs, &float_context.fpregs, sizeof(context->fpregs));
+  context->fcc = float_context.fcc;
+  context->fcsr = float_context.fcsr;
+}
+
+void InitializeCPUContextLOONG64(
+    const ThreadContext::t64_t& thread_context,
+    const FloatContext::f64_t& float_context,
+    CPUContextLOONG64* context) {
+  InitializeCPUContextLOONG64_NoFloatingPoint(thread_context, context);
+
+  InitializeCPUContextLOONG64_OnlyFPU(float_context, context);
+}
 #endif  // ARCH_CPU_X86_FAMILY
 
 }  // namespace internal
diff --git a/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.h b/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.h
index 507d1b44dd0e5521872392a95aab6004242a5644..acf936edd8380a4e25d9d1eb4152995f6611a49e 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.h
+++ b/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.h
@@ -188,6 +188,44 @@ void InitializeCPUContextRISCV64(const ThreadContext::t64_t& thread_context,
 
 #endif  // ARCH_CPU_RISCV64 || DOXYGEN
 
+#if defined(ARCH_CPU_LOONGARCH64) || DOXYGEN
+
+//! \brief Initializes GPR state in a CPUContextLOONG64 from a native context
+//!     structure on Linux.
+//!
+//! Floating point state is initialized to zero.
+//!
+//! \param[in] thread_context The native thread context.
+//! \param[out] context The CPUContextLOONG64 structure to initialize.
+void InitializeCPUContextLOONG64_NoFloatingPoint(
+    const ThreadContext::t64_t& thread_context,
+    CPUContextLOONG64* context);
+//! \brief Initializes FPU state in a CPUContextLOONG64 from a native fpu
+//!     signal context structure on Linux.
+//!
+//! General purpose registers are not initialized.
+//!
+//! \param[in] float_context The native fpu context.
+//! \param[out] context The CPUContextLOONG64 structure to initialize.
+void InitializeCPUContextLOONG64_OnlyFPU(
+    const FloatContext::f64_t& float_context,
+    CPUContextLOONG64* context);
+//! \brief Initializes a CPUContextLOONG64 structure from native context
+//!     structures on Linux.
+//!
+//! This function has template specializations for LOONG64 architecture
+//! contexts, using ContextTraits32 or ContextTraits64 as template parameter,
+//! respectively.
+//!
+//! \param[in] thread_context The native thread context.
+//! \param[in] float_context The native float context.
+//! \param[out] context The CPUContextLOONG64 structure to initialize.
+void InitializeCPUContextLOONG64(
+    const ThreadContext::t64_t& thread_context,
+    const FloatContext::f64_t& float_context,
+    CPUContextLOONG64* context);
+#endif  // ARCH_CPU_LOONGARCH64 || DOXYGEN
+
 }  // namespace internal
 }  // namespace crashpad
 
diff --git a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.cc
index 677afdaa77362bb0ea83ad5c4fa82dd5dc27da46..ea4b216527a6eebbba9c3ffc96f727a6642f52db 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.cc
@@ -15,6 +15,7 @@
 #include "snapshot/linux/exception_snapshot_linux.h"
 
 #include <signal.h>
+#include <string.h>
 
 #include "base/logging.h"
 #include "snapshot/linux/capture_memory_delegate_linux.h"
@@ -367,6 +368,77 @@ bool ExceptionSnapshotLinux::ReadContext<ContextTraits64>(
   return internal::ReadContext(reader, context_address, context_.riscv64);
 }
 
+#elif defined(ARCH_CPU_LOONGARCH64)
+template <typename Traits>
+static bool ReadContext(ProcessReaderLinux* reader,
+                        LinuxVMAddress context_address,
+                        typename Traits::CPUContext* dest_context) {
+  const ProcessMemory* memory = reader->Memory();
+  LinuxVMAddress gregs_address = context_address +
+                                 offsetof(UContext<Traits>, mcontext);
+  ThreadContext::t64_t thread_context;
+  typename Traits::MContext mcontext;
+  if (!memory->Read(gregs_address, sizeof(mcontext), &mcontext)) {
+    LOG(ERROR) << "Couldn't read gregs";
+    return false;
+  }
+  static_assert(sizeof(thread_context.regs) == sizeof(mcontext.gregs),
+                "gpr context size mismtach");
+  memcpy(thread_context.regs, mcontext.gregs, sizeof(mcontext.gregs));
+  thread_context.csr_era = mcontext.pc;
+  thread_context.orig_a0 = 0;
+  thread_context.csr_badv = 0;
+  InitializeCPUContextLOONG64_NoFloatingPoint(thread_context, dest_context);
+  LinuxVMAddress reserved_address =
+        context_address + offsetof(UContext<Traits>, mcontext.extcontext);
+  if ((reserved_address & 15) != 0) {
+    LOG(ERROR) << "invalid alignment 0x" << std::hex << reserved_address;
+    return false;
+   }
+  constexpr VMSize kMaxContextSpace = 4096;
+  ProcessMemoryRange range;
+  if (!range.Initialize(memory, true, reserved_address, kMaxContextSpace)) {
+    return false;
+  }
+  do {
+    struct sctx_info head;
+    if (!range.Read(reserved_address, sizeof(head), &head)) {
+      LOG(ERROR) << "missing context terminator";
+      return false;
+    }
+    reserved_address += sizeof(head);
+    switch (head.magic) {
+      case FPU_CTX_MAGIC:
+        if (head.size != sizeof(struct fpu_context) + sizeof(head)) {
+          LOG(ERROR) << "unexpected fpu context size " << head.size;
+          return false;
+        }
+        FloatContext::f64_t fpucontext;
+        if (!range.Read(reserved_address, sizeof(fpucontext), &fpucontext)) {
+          LOG(ERROR) << "Couldn't read fpu " << head.size;
+          return false;
+        }
+        InitializeCPUContextLOONG64_OnlyFPU(fpucontext, dest_context);
+        return true;
+      case 0:
+        return true;
+      default:
+        LOG(ERROR) << "invalid magic number 0x" << std::hex << head.magic;
+        return false;
+    }
+  } while (true);
+}
+
+template <>
+bool ExceptionSnapshotLinux::ReadContext<ContextTraits64>(
+    ProcessReaderLinux* reader,
+    LinuxVMAddress context_address) {
+  context_.architecture = kCPUArchitectureLOONG64;
+  context_.loong64 = &context_union_.loong64;
+
+  return internal::ReadContext<ContextTraits64>(
+      reader, context_address, context_.loong64);
+}
 #endif  // ARCH_CPU_X86_FAMILY
 
 bool ExceptionSnapshotLinux::Initialize(
@@ -397,7 +469,7 @@ bool ExceptionSnapshotLinux::Initialize(
       return false;
     }
   } else {
-#if !defined(ARCH_CPU_RISCV64)
+#if !defined(ARCH_CPU_RISCV64) && !defined(ARCH_CPU_LOONGARCH64)
     if (!ReadContext<ContextTraits32>(process_reader, context_address) ||
         !ReadSiginfo<Traits32>(process_reader, siginfo_address)) {
       return false;
diff --git a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.h b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.h
index f931d33002a7b55bcd6e2aa29c280fa2e3393bb8..c5acf661f829bb1371951194ba2e70fa67c88cbb 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.h
+++ b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.h
@@ -91,6 +91,8 @@ class ExceptionSnapshotLinux final : public ExceptionSnapshot {
     CPUContextMIPS64 mips64;
 #elif defined(ARCH_CPU_RISCV64)
     CPUContextRISCV64 riscv64;
+#elif defined(ARCH_CPU_LOONGARCH64)
+    CPUContextLOONG64 loong64;
 #endif
   } context_union_;
   CPUContext context_;
diff --git a/third_party/crashpad/crashpad/snapshot/linux/process_reader_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/process_reader_linux.cc
index 45713386d953e4bbf67599fd2727c602f9a5b127..3afcd51478922129731037f6d5bec720e78f6c0a 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/process_reader_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/process_reader_linux.cc
@@ -129,6 +129,8 @@ void ProcessReaderLinux::Thread::InitializeStack(ProcessReaderLinux* reader) {
                                     : thread_info.thread_context.t32.regs[29];
 #elif defined(ARCH_CPU_RISCV64)
   stack_pointer = thread_info.thread_context.t64.regs[1];
+#elif defined(ARCH_CPU_LOONGARCH64)
+  stack_pointer = thread_info.thread_context.t64.regs[3];
 #else
 #error Port.
 #endif
diff --git a/third_party/crashpad/crashpad/snapshot/linux/signal_context.h b/third_party/crashpad/crashpad/snapshot/linux/signal_context.h
index 89e697a08bad013a0d91e036310b9f91b1ad3f48..249554405ec82c00058a1b42a7b9239860e14861 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/signal_context.h
+++ b/third_party/crashpad/crashpad/snapshot/linux/signal_context.h
@@ -41,7 +41,7 @@ union Sigval {
 template <class Traits>
 struct Siginfo {
   int32_t signo;
-#ifdef ARCH_CPU_MIPS_FAMILY
+#if defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONG64_FAMILY)
   // Attribute order for signo_t defined in kernel is different for MIPS.
   int32_t code;
   int32_t err;
@@ -456,6 +456,42 @@ static_assert(offsetof(UContext<ContextTraits64>, mcontext.fpregs) ==
                   offsetof(ucontext_t, uc_mcontext.__fpregs),
               "context offset mismatch");
 
+#elif defined(ARCH_CPU_LOONGARCH64)
+struct MContext64 {
+  uint64_t pc;
+  uint64_t gregs[32];
+  uint32_t flags;
+  uint32_t pading;
+  uint64_t extcontext[0] __attribute__((__aligned__(16)));
+};
+
+struct ContextTraits64 : public Traits64 {
+  using MContext = MContext64;
+  using SignalThreadContext = ThreadContext::t64_t;
+  using SignalFloatContext = FloatContext::f64_t;
+  using CPUContext = CPUContextLOONG64;
+};
+
+template <typename Traits>
+struct UContext {
+  typename Traits::ULong flags;
+  typename Traits::Address link;
+  SignalStack<Traits> stack;
+  Sigset<Traits> sigmask;
+  char padding[128 - sizeof(sigmask)];
+  uint64_t pading1;
+  typename Traits::MContext mcontext;
+};
+
+static_assert(offsetof(UContext<ContextTraits64>, mcontext) ==
+                  offsetof(ucontext_t, uc_mcontext),
+              "context offset mismtach");
+static_assert(offsetof(UContext<ContextTraits64>, mcontext.gregs) ==
+                  offsetof(ucontext_t, uc_mcontext.__gregs),
+              "context offset mismatch");
+static_assert(offsetof(UContext<ContextTraits64>, mcontext.extcontext) ==
+                  offsetof(ucontext_t, uc_mcontext.__extcontext),
+              "context offset mismatch");
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
diff --git a/third_party/crashpad/crashpad/snapshot/linux/system_snapshot_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/system_snapshot_linux.cc
index b32f22d784f67b4ace40af672030a001218b7ffc..21642e919b602d2a9fc16a7c25dc258d497bb7cd 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/system_snapshot_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/system_snapshot_linux.cc
@@ -208,6 +208,8 @@ CPUArchitecture SystemSnapshotLinux::GetCPUArchitecture() const {
                                     : kCPUArchitectureMIPSEL;
 #elif defined(ARCH_CPU_RISCV64)
   return kCPUArchitectureRISCV64;
+#elif defined(ARCH_CPU_LOONGARCH64)
+  return kCPUArchitectureLOONG64;
 #else
 #error port to your architecture
 #endif
@@ -226,6 +228,9 @@ uint32_t SystemSnapshotLinux::CPURevision() const {
 #elif defined(ARCH_CPU_RISCV64)
   // Not implemented
   return 0;
+#elif defined(ARCH_CPU_LOONGARCH64)
+  // Not implementable on LOONG64
+  return 0;
 #else
 #error port to your architecture
 #endif
@@ -249,6 +254,9 @@ std::string SystemSnapshotLinux::CPUVendor() const {
 #elif defined(ARCH_CPU_RISCV64)
   // Not implemented
   return std::string();
+#elif defined(ARCH_CPU_LOONGARCH64)
+  // Not implementable on LOONG64
+  return std::string();
 #else
 #error port to your architecture
 #endif
@@ -385,6 +393,9 @@ bool SystemSnapshotLinux::NXEnabled() const {
 #elif defined(ARCH_CPU_RISCV64)
   // Not implemented
   return false;
+#elif defined(ARCH_CPU_LOONGARCH64)
+  // Not implementable on LOONGARCH64
+  return false;
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
diff --git a/third_party/crashpad/crashpad/snapshot/linux/test_modules.cc b/third_party/crashpad/crashpad/snapshot/linux/test_modules.cc
index c03cbaae5674be567978c027dfbd2631d0024a54..c900f26c31f9113aa9571e67554ace7c65b08fe7 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/test_modules.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/test_modules.cc
@@ -112,6 +112,9 @@ bool WriteTestModule(const base::FilePath& module_path,
   module.ehdr.e_machine = EM_MIPS;
 #elif defined(ARCH_CPU_RISCV64)
   module.ehdr.e_machine = EM_RISCV;
+#elif defined(ARCH_CPU_LOONGARCH64)
+  module.ehdr.e_machine = EM_LOONGARCH;
+  module.ehdr.e_flags |= EF_LARCH_ABI_LP64;
 #endif
 
 #if defined(ARCH_CPU_RISCV64)
diff --git a/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.cc
index 85882e8ee464f77fe398371c15919940407724a6..7960bead0e495c8456f9027b5f8d39b4185c1070 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.cc
@@ -196,6 +196,12 @@ bool ThreadSnapshotLinux::Initialize(
   InitializeCPUContextRISCV64(thread.thread_info.thread_context.t64,
                               thread.thread_info.float_context.f64,
                               context_.riscv64);
+#elif defined(ARCH_CPU_LOONGARCH64)
+  context_.architecture = kCPUArchitectureLOONG64;
+  context_.loong64 = &context_union_.loong64;
+  InitializeCPUContextLOONG64(thread.thread_info.thread_context.t64,
+      thread.thread_info.float_context.f64,
+      context_.loong64);
 #else
 #error Port.
 #endif
diff --git a/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.h b/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.h
index 5795bfb985a2512310e1785c06d7ae3567f9aef8..e7866e3c44d45084fdff1cbc6f5b6150073153a9 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.h
+++ b/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.h
@@ -76,6 +76,8 @@ class ThreadSnapshotLinux final : public ThreadSnapshot {
     CPUContextMIPS64 mips64;
 #elif defined(ARCH_CPU_RISCV64)
     CPUContextRISCV64 riscv64;
+#elif defined(ARCH_CPU_LOONGARCH64)
+    CPUContextLOONG64 loong64;
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
diff --git a/third_party/crashpad/crashpad/snapshot/minidump/minidump_context_converter.cc b/third_party/crashpad/crashpad/snapshot/minidump/minidump_context_converter.cc
index ec02dff1266785d98dc119a9cfa9e3980a02d84f..fedb2b94e06107d8484222c76bb965089b803bc5 100644
--- a/third_party/crashpad/crashpad/snapshot/minidump/minidump_context_converter.cc
+++ b/third_party/crashpad/crashpad/snapshot/minidump/minidump_context_converter.cc
@@ -293,6 +293,29 @@ bool MinidumpContextConverter::Initialize(
     memcpy(&context_.riscv64->fpregs, &src->fpregs, sizeof(src->fpregs));
 
     context_.riscv64->fcsr = src->fcsr;
+  } else if (context_.architecture == CPUArchitecture::kCPUArchitectureLOONG64) {
+    context_memory_.resize(sizeof(CPUContextLOONG64));
+    context_.loong64 =
+        reinterpret_cast<CPUContextLOONG64*>(context_memory_.data());
+    const MinidumpContextLOONG64* src =
+        reinterpret_cast<const MinidumpContextLOONG64*>(minidump_context.data());
+    if (minidump_context.size() < sizeof(MinidumpContextLOONG64)) {
+      return false;
+    }
+
+    if (!(src->context_flags & kMinidumpContextLOONG64)) {
+      return false;
+    }
+
+    for (size_t i = 0; i < std::size(src->regs); i++) {
+      context_.loong64->regs[i] = src->regs[i];
+    }
+
+    context_.loong64->csr_era = src->csr_era;
+    context_.loong64->fcsr = src->fcsr;
+    context_.loong64->fcc = src->fcc;
+
+    memcpy(&context_.loong64->fpregs, &src->fpregs, sizeof(src->fpregs));  
   } else {
     // Architecture is listed as "unknown".
     DLOG(ERROR) << "Unknown architecture";
diff --git a/third_party/crashpad/crashpad/snapshot/minidump/system_snapshot_minidump.cc b/third_party/crashpad/crashpad/snapshot/minidump/system_snapshot_minidump.cc
index 58bd7b364739af36c4ce9081cb0e24744f80df16..b73d633a31d44e1f666aa4e82b8bef063552be1d 100644
--- a/third_party/crashpad/crashpad/snapshot/minidump/system_snapshot_minidump.cc
+++ b/third_party/crashpad/crashpad/snapshot/minidump/system_snapshot_minidump.cc
@@ -70,7 +70,8 @@ CPUArchitecture SystemSnapshotMinidump::GetCPUArchitecture() const {
     // No word on how MIPS64 is signalled
     case kMinidumpCPUArchitectureRISCV64Breakpad:
       return kCPUArchitectureRISCV64;
-
+    case kMinidumpCPUArchitectureLOONG64:
+      return kCPUArchitectureLOONG64;
     default:
       return CPUArchitecture::kCPUArchitectureUnknown;
   }
diff --git a/third_party/crashpad/crashpad/util/linux/exception_handler_client.cc b/third_party/crashpad/crashpad/util/linux/exception_handler_client.cc
index 68dc67eff91375319bda9bb1e298078703361685..10f8496cf70493b87cef0e68886e3109171fc30f 100644
--- a/third_party/crashpad/crashpad/util/linux/exception_handler_client.cc
+++ b/third_party/crashpad/crashpad/util/linux/exception_handler_client.cc
@@ -41,9 +41,9 @@ namespace {
 
 class ScopedSigprocmaskRestore {
  public:
-  explicit ScopedSigprocmaskRestore(const kernel_sigset_t& set_to_block)
+  explicit ScopedSigprocmaskRestore(const sigset_t& set_to_block)
       : orig_mask_(), mask_is_set_(false) {
-    mask_is_set_ = sys_sigprocmask(SIG_BLOCK, &set_to_block, &orig_mask_) == 0;
+    mask_is_set_ = sigprocmask(SIG_BLOCK, &set_to_block, &orig_mask_) == 0;
     DPLOG_IF(ERROR, !mask_is_set_) << "sigprocmask";
   }
 
@@ -52,13 +52,13 @@ class ScopedSigprocmaskRestore {
 
   ~ScopedSigprocmaskRestore() {
     if (mask_is_set_ &&
-        sys_sigprocmask(SIG_SETMASK, &orig_mask_, nullptr) != 0) {
+        sigprocmask(SIG_SETMASK, &orig_mask_, nullptr) != 0) {
       DPLOG(ERROR) << "sigprocmask";
     }
   }
 
  private:
-  kernel_sigset_t orig_mask_;
+  sigset_t orig_mask_;
   bool mask_is_set_;
 };
 
@@ -123,9 +123,9 @@ void ExceptionHandlerClient::SetCanSetPtracer(bool can_set_ptracer) {
 int ExceptionHandlerClient::SignalCrashDump(
     const ExceptionHandlerProtocol::ClientInformation& info,
     VMAddress stack_pointer) {
-  kernel_sigset_t dump_done_sigset;
-  sys_sigemptyset(&dump_done_sigset);
-  sys_sigaddset(&dump_done_sigset, ExceptionHandlerProtocol::kDumpDoneSignal);
+  sigset_t dump_done_sigset;
+  sigemptyset(&dump_done_sigset);
+  sigaddset(&dump_done_sigset, ExceptionHandlerProtocol::kDumpDoneSignal);
   ScopedSigprocmaskRestore scoped_block(dump_done_sigset);
 
   int status = SendCrashDumpRequest(info, stack_pointer);
@@ -137,7 +137,7 @@ int ExceptionHandlerClient::SignalCrashDump(
   timespec timeout;
   timeout.tv_sec = 5;
   timeout.tv_nsec = 0;
-  if (HANDLE_EINTR(sys_sigtimedwait(&dump_done_sigset, &siginfo, &timeout)) <
+  if (HANDLE_EINTR(sigtimedwait(&dump_done_sigset, &siginfo, &timeout)) <
       0) {
     return errno;
   }
diff --git a/third_party/crashpad/crashpad/util/linux/ptracer.cc b/third_party/crashpad/crashpad/util/linux/ptracer.cc
index a985cb1d1ff976ccf68840957f968677efe44a4b..028fdae93a8cd32389f2a43e7368d87a38dd85bf 100644
--- a/third_party/crashpad/crashpad/util/linux/ptracer.cc
+++ b/third_party/crashpad/crashpad/util/linux/ptracer.cc
@@ -430,6 +430,61 @@ bool GetThreadArea64(pid_t tid,
   return true;
 }
 
+#elif defined(ARCH_CPU_LOONGARCH64)
+
+#include <asm/ptrace.h>
+
+bool GetFloatingPointRegisters32(pid_t tid,
+                                 FloatContext* context,
+                                 bool can_log) {
+  return false;
+}
+
+bool GetFloatingPointRegisters64(pid_t tid,
+                                 FloatContext* context,
+                                 bool can_log) {
+  iovec iov;
+  iov.iov_base = context;
+  iov.iov_len = sizeof(*context);
+  if (ptrace(PTRACE_GETREGSET, tid, reinterpret_cast<void*>(NT_PRFPREG), &iov) != 0) {
+    PLOG_IF(ERROR, can_log) << "ptrace";
+    return false;
+  }
+  if (iov.iov_len != sizeof(context->f64)) {
+    LOG_IF(ERROR, can_log) << "Unexpected registers size " << iov.iov_len
+                           << " != " << sizeof(context->f64);
+    return false;
+  }
+
+  return true;
+}
+
+bool GetThreadArea32(pid_t tid,
+                     const ThreadContext& context,
+                     LinuxVMAddress* address,
+                     bool can_log) {
+  return false;
+}
+
+bool GetThreadArea64(pid_t tid,
+                     const ThreadContext& context,
+                     LinuxVMAddress* address,
+                     bool can_log) {
+  struct user_pt_regs loongarch_regs;
+  struct iovec iov = {
+     .iov_base = &loongarch_regs,
+     .iov_len = sizeof(loongarch_regs)
+  };
+
+  if (ptrace(PTRACE_GETREGSET, tid, NT_PRSTATUS, &iov) != 0) {
+    PLOG_IF(ERROR, can_log) << "ptrace";
+    return false;
+  }
+  *address = loongarch_regs.regs[2];
+  return true;
+}
+
+
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
diff --git a/third_party/crashpad/crashpad/util/linux/thread_info.h b/third_party/crashpad/crashpad/util/linux/thread_info.h
index 5b7a065fdde4cb27c7d4b4445ab7414476e6c586..81a5482b1585110a6f8681033d911e59dcbd6e8f 100644
--- a/third_party/crashpad/crashpad/util/linux/thread_info.h
+++ b/third_party/crashpad/crashpad/util/linux/thread_info.h
@@ -87,8 +87,8 @@ union ThreadContext {
     uint32_t padding1_;
 #elif defined(ARCH_CPU_RISCV64)
     // 32 bit RISC-V not supported
-#elif defined(ARCH_CPU_LOONG64)
-  // Nothing
+#elif defined(ARCH_CPU_LOONGARCH64)
+    // Nothing
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
@@ -146,7 +146,7 @@ union ThreadContext {
     // Reflects user_regs_struct in asm/ptrace.h.
     uint64_t pc;
     uint64_t regs[31];
-#elif defined(ARCH_CPU_LOONG64)
+#elif defined(ARCH_CPU_LOONGARCH64)
     // Reflects user_regs_struct in sys/user.h.
     uint64_t regs[32];
     uint64_t orig_a0;
@@ -163,13 +163,13 @@ union ThreadContext {
   using NativeThreadContext = user_regs_struct;
 #elif defined(ARCH_CPU_ARMEL)
   using NativeThreadContext = user_regs;
-#elif defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONG64)
+#elif defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONGARCH64)
 // No appropriate NativeThreadsContext type available for MIPS
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY || ARCH_CPU_ARM64 || ARCH_CPU_RISCV64
 
-#if !defined(ARCH_CPU_MIPS_FAMILY) && !defined(ARCH_CPU_LOONG64)
+#if !defined(ARCH_CPU_MIPS_FAMILY) && !defined(ARCH_CPU_LOONGARCH64)
 #if defined(ARCH_CPU_32_BITS)
   static_assert(sizeof(t32_t) == sizeof(NativeThreadContext), "Size mismatch");
 #else  // ARCH_CPU_64_BITS
@@ -242,7 +242,7 @@ union FloatContext {
     uint32_t fpu_id;
 #elif defined(ARCH_CPU_RISCV64)
     // 32 bit RISC-V not supported
-#elif defined(ARCH_CPU_LOONG64)
+#elif defined(ARCH_CPU_LOONGARCH64)
     // Nothing
 #else
 #error Port.
@@ -282,7 +282,7 @@ union FloatContext {
     // Reflects __riscv_d_ext_state in asm/ptrace.h
     uint64_t fpregs[32];
     uint64_t fcsr;
-#elif defined(ARCH_CPU_LOONG64)
+#elif defined(ARCH_CPU_LOONGARCH64)
     double fpregs[32];
     uint64_t fcc;
     uint32_t fcsr;
@@ -314,7 +314,7 @@ union FloatContext {
 #endif
 #elif defined(ARCH_CPU_ARM64)
   static_assert(sizeof(f64) == sizeof(user_fpsimd_struct), "Size mismatch");
-#elif defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONG64)
+#elif defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONGARCH64)
 // No appropriate floating point context native type for available MIPS.
 #elif defined(ARCH_CPU_RISCV64)
   static_assert(sizeof(f64) == sizeof(__riscv_d_ext_state), "Size mismatch");
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context.h b/third_party/crashpad/crashpad/util/misc/capture_context.h
index 49e3a7bb4be7220a88ad88f67f819a379cc05ea1..b4954cc22307c25e9adfb3aba6cd041bb3802312 100644
--- a/third_party/crashpad/crashpad/util/misc/capture_context.h
+++ b/third_party/crashpad/crashpad/util/misc/capture_context.h
@@ -21,8 +21,11 @@
 #include <mach/mach.h>
 #elif BUILDFLAG(IS_WIN)
 #include <windows.h>
-#elif BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID)
+#elif BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) 
 #include <ucontext.h>
+#if defined(ARCH_CPU_LOONGARCH64)
+#include <asm/sigcontext.h>
+#endif
 #endif  // BUILDFLAG(IS_APPLE)
 
 #if defined(ARCH_CPU_LOONG64)
@@ -40,7 +43,7 @@ using NativeCPUContext = arm_unified_thread_state;
 #elif BUILDFLAG(IS_WIN)
 using NativeCPUContext = CONTEXT;
 #elif BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID)
-#if defined(ARCH_CPU_LOONG64)
+#if defined(ARCH_CPU_LOONGARCH64)
 typedef struct {
   ucontext_t ucontext;
   struct sctx_info contextinfo;
diff --git a/third_party/crashpad/crashpad/util/net/http_transport_libcurl.cc b/third_party/crashpad/crashpad/util/net/http_transport_libcurl.cc
index df63a77296d045975884c132a9657e9c1d57d4d2..f688ba0c9e5fc916125d56ab2fd0298929224f2f 100644
--- a/third_party/crashpad/crashpad/util/net/http_transport_libcurl.cc
+++ b/third_party/crashpad/crashpad/util/net/http_transport_libcurl.cc
@@ -239,6 +239,8 @@ std::string UserAgent() {
 #endif
 #elif defined (ARCH_CPU_RISCV64)
     static constexpr char arch[] = "riscv64";
+#elif defined(ARCH_CPU_LOONGARCH64)
+    static constexpr char arch[] = "loong64";
 #else
 #error Port
 #endif
